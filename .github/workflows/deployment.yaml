name: Terraform Cloud + Blue-Green Deployment

on:
  push:
    branches:
      - main

permissions:
  actions: read
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # 3Ô∏è‚É£ Trigger initial Terraform Cloud run
      - name: Trigger Terraform Cloud Run
        id: tf_run
        run: |
          RESPONSE=$(curl -s \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "attributes": {
                  "is-destroy": false,
                  "message": "Triggered from GitHub Actions push to main"
                },
                "type":"runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "YOUR_WORKSPACE_ID"
                    }
                  }
                }
              }
            }' \
            https://app.terraform.io/api/v2/runs)

          # Capture the run ID
          RUN_ID=$(echo $RESPONSE | jq -r '.data.id')
          echo "TF_RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Terraform run triggered: $RUN_ID"

      # 4Ô∏è‚É£ (Optional) Wait for Terraform run to complete
      - name: Wait for Terraform run to complete
        run: |
          echo "Monitoring Terraform run $TF_RUN_ID..."
          STATUS="pending"
          while [[ "$STATUS" == "pending" || "$STATUS" == "planning" ]]; do
            sleep 10
            STATUS=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/runs/$TF_RUN_ID \
              | jq -r '.data.attributes.status')
            echo "Current status: $STATUS"
          done
          if [[ "$STATUS" != "applied" ]]; then
            echo "Terraform run did not apply successfully. Exiting."
            exit 1
          fi

      # 5Ô∏è‚É£ Download PEM file
      - name: Download PEM
        uses: actions/download-artifact@v4
        with:
          name: ec2-ssh-pem
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.run_id }}

      - name: Export PEM as env var
        run: |
          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat CraveCartKey.pem >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          chmod 600 CraveCartKey.pem

      # 6Ô∏è‚É£ Fetch Terraform outputs from Terraform Cloud
      - name: Fetch Terraform Cloud outputs
        run: |
          curl -s \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/workspaces/YOUR_WORKSPACE_ID/current-state-version?include=outputs" \
            -o state.json

      - name: Parse Terraform outputs
        id: outputs
        run: |
          BLUE_IP=$(jq -r '.included[] | select(.attributes.name=="blue_ip") | .attributes.value' state.json)
          GREEN_IP=$(jq -r '.included[] | select(.attributes.name=="green_ip") | .attributes.value' state.json)
          ACTIVE=$(jq -r '.included[] | select(.attributes.name=="active_env") | .attributes.value' state.json)

          echo "BLUE_IP=$BLUE_IP" >> $GITHUB_ENV
          echo "GREEN_IP=$GREEN_IP" >> $GITHUB_ENV
          echo "ACTIVE=$ACTIVE" >> $GITHUB_ENV

      # 7Ô∏è‚É£ Determine target environment
      - name: Determine target environment
        run: |
          if [ "${{ env.ACTIVE }}" = "blue" ]; then
            echo "TARGET_ENV=green" >> $GITHUB_ENV
            echo "TARGET_IP=${{ env.GREEN_IP }}" >> $GITHUB_ENV
          else
            echo "TARGET_ENV=blue" >> $GITHUB_ENV
            echo "TARGET_IP=${{ env.BLUE_IP }}" >> $GITHUB_ENV
          fi

      # 8Ô∏è‚É£ Install Ansible
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      # 9Ô∏è‚É£ Create inventory file
      - name: Create inventory file
        run: |
          echo "[target]" > ansible/inventory.ini
          echo "${{ env.TARGET_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=CraveCartKey.pem" >> ansible/inventory.ini

      # üîü Run Ansible playbook
      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbooks/deploy.yaml \
          --extra-vars "commit_sha=${GITHUB_SHA} docker_user=${{ secrets.DOCKER_USERNAME }}"

      # 1Ô∏è‚É£1Ô∏è‚É£ Trigger Terraform Cloud run to switch traffic
      - name: Switch traffic via Terraform Cloud
        run: |
          curl \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "attributes": {
                  "is-destroy": false,
                  "message": "Switch traffic to '${TARGET_ENV}'",
                  "variables": [
                    {"key": "active_env", "value": "'"${TARGET_ENV}"'"}
                  ]
                },
                "type":"runs",
                "relationships": {
                  "workspace": {
                    "data": { "type": "workspaces", "id": "YOUR_WORKSPACE_ID" }
                  }
                }
              }
            }' \
            https://app.terraform.io/api/v2/runs
